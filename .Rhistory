uniqueproducts <- c(uniqueproducts, product)  # add the product to the vector
for (j in 1:length(primes)) {
if (i != j) {  # need unique numbers
product <- primes[i] * primes[j]  # calculate the product
if (product < 100) {  # if the product is less than 100
if (!(product %in% uniqueproducts) { #checks to see if product not already in vector
blakesnumbers <- c(6, 10, 14, 15, 21, 22, 26, 33, 34, 35, 38, 39, 46,
51, 55, 57, 58, 62, 65, 69, 75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,
41, 43, 47)  # all prime numbers less than 50
uniqueproducts <- vector()  # empty vector to store unique products
for (i in 1:length(primes)) {
for (j in (i+1):length(primes)) {  # start the second loop at i+1 to avoid duplicates
product <- primes[i] * primes[j]  # calculate the product
if (product < 100) {  # only include products less than 100
uniqueproducts <- c(uniqueproducts, product)  # add the product to the vector
}
}
}
uniqueproducts  # returns the unique products
blakesnumbers <- c(6, 10, 14, 15, 21, 22, 26, 33, 34, 35, 38, 39, 46,
51, 55, 57, 58, 62, 65, 69, 75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,
41, 43, 47)  # all prime numbers less than 50
uniqueproducts <- vector()  # empty vector to store unique products
for (i in 1:length(primes)) {
for (j in (i+1):length(primes)) {  # start the second loop at i+1 to avoid duplicates
product <- primes[i] * primes[j]  # calculate the product
if (product < 100) {  # only include products less than 100
uniqueproducts <- c(uniqueproducts, product)  # add the product to the vector
}
}
}
numbers_not_in_uniqueproducts <- setdiff(blakesnumbers, uniqueproducts)
numbers_not_in_uniqueproducts
numbers_not_in_blakesnumbers =setdiff(uniqueproducts, blakesnumbers)
(uniqueproducts=sort(uniqueproducts))
setwd("~/lab-5-summarizing-and-graphing-data-in-r-jcolby21")
allentown.data=read.csv("data/essentia.data.allentown.csv")
data= read.csv("data/essentia.data.csv")
data %>%
group_by(artist)
data %>%
group_by(artist)
load(tidyverse)
install tidyverse
library(tidyverse)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
data %>%
group_by(artist)
data %>%
group_by(artist)
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(pverall_loudness, na.rm = TRUE))
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE))
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE)) %>%
#creating the data we want for overall loudness
data %>%
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE)) %>%
summarize(UF_overall_loudness= quantile(overall_loudness, probs = .75)+1.5*IQR(overall_loudness)) %>%
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE)) %>%
summarize(LF_overall_loudness= quantile(overall_loudness, probs = .25)-1.5*IQR(overall_loudness)) %>%
summarize(UF_overall_loudness= quantile(overall_loudness, probs = .75)+1.5*IQR(overall_loudness)) %>%
summarize(max_overall_loudness = max(overall_loudness, na.rm = TRUE))
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE)) %>%
summarize(LF_overall_loudness= quantile(overall_loudness, probs = .25)-1.5*IQR(overall_loudness)) %>%
summarize(UF_overall_loudness= quantile(overall_loudness, probs = .75)+1.5*IQR(overall_loudness)) %>%
summarize(max_overall_loudness = max(overall_loudness, na.rm = TRUE))
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE)) %>%
summarize(LF_overall_loudness= quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness)) %>%
summarize(UF_overall_loudness= quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness)) %>%
summarize(max_overall_loudness = max(overall_loudness, na.rm = TRUE))
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE)) %>%
summarize(LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness)) %>%
summarize(UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness)) %>%
summarize(max_overall_loudness = max(overall_loudness, na.rm = TRUE))
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE))
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE),
LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness),
UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness),
max_overall_loudness = max(overall_loudness, na.rm = TRUE))
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE),
LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness),
UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness),
max_overall_loudness = max(overall_loudness, na.rm = TRUE)) %>%
mutate(out.of.range=allentown.data$overall_loudness>max_overall_loudness || allentown.data$overall_loudness<min_overall_loudness) %>%
mutate(unusual, allentown.data$overall_loudness)
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE),
LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness),
UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness),
max_overall_loudness = max(overall_loudness, na.rm = TRUE)) %>%
rowwise()|>
mutate(out.of.range=allentown.data$overall_loudness>max_overall_loudness || allentown.data$overall_loudness<min_overall_loudness) %>%
mutate(unusual, allentown.data$overall_loudness)
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE),
LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness),
UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness),
max_overall_loudness = max(overall_loudness, na.rm = TRUE)) %>%
rowwise()|>
mutate(out.of.range=allentown.data$overall_loudness>max_overall_loudness || allentown.data$overall_loudness<min_overall_loudness) %>% #sees if less than min or greater than max
mutate(unusual= allentown.data$overall_loudness>UF_overall_loudness || allentown.data$overall_loudness<LF_overall_loudness) #sees if less than LF or more than UF
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE),
LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness),
UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness),
max_overall_loudness = max(overall_loudness, na.rm = TRUE)) %>%
rowwise()|>
mutate(out.of.range=allentown.data$overall_loudness>max_overall_loudness || allentown.data$overall_loudness<min_overall_loudness) %>% #sees if less than min or greater than max
mutate(unusual= allentown.data$overall_loudness>UF_overall_loudness || allentown.data$overall_loudness<LF_overall_loudness) #sees if less than LF or more than UF
#creating the data we want for overall loudness
data %>%
group_by(artist) %>% #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE),
LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness),
UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness),
max_overall_loudness = max(overall_loudness, na.rm = TRUE)) %>%
rowwise()|>
mutate(out.of.range=allentown.data$overall_loudness>max_overall_loudness || allentown.data$overall_loudness<min_overall_loudness) %>% #sees if less than min or greater than max
mutate(unusual= allentown.data$overall_loudness>UF_overall_loudness || allentown.data$overall_loudness<LF_overall_loudness) %>% #sees if less than LF or more than UF
mutate(description = case_when( out.of.range == TRUE ~ "Out of Range", unusual == TRUE ~ "Outlying", TRUE ~ "Within Range"))
#creating the data we want for overall loudness
data %>%
group_by(artist) |> #groups the data by the artist
summarize(min_overall_loudness = min(overall_loudness, na.rm = TRUE),
LF_overall_loudness = quantile(overall_loudness, probs = .25) - 1.5*IQR(overall_loudness),
UF_overall_loudness = quantile(overall_loudness, probs = .75) + 1.5*IQR(overall_loudness),
max_overall_loudness = max(overall_loudness, na.rm = TRUE)) |>
rowwise()|>
mutate(out.of.range=allentown.data$overall_loudness>max_overall_loudness || allentown.data$overall_loudness<min_overall_loudness) |> #sees if less than min or greater than max
mutate(unusual= allentown.data$overall_loudness>UF_overall_loudness || allentown.data$overall_loudness<LF_overall_loudness) |> #sees if less than LF or more than UF
mutate(description = case_when( out.of.range == TRUE ~ "Out of Range", unusual == TRUE ~ "Outlying", TRUE ~ "Within Range")) #writes the desired description for each scenario
View(data)
install.packages("psych")
get(feature)
length(data)
data[1]
data[1][[1]]
data[,1]
is.numeric([4,5,6])
is.numeric(4, 5, 6)
joe=[4, 5, 6]
#creating a function to loop over all features
for i in length(data){
#creating a function to loop over all features
for i in 1:length(data){
#creating a function to loop over all features
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) |>
summarize(min_overall_loudness = min(get(feature), na.rm = TRUE),
LF_overall_loudness = quantile(get(feature), probs = .25) - 1.5*IQR(get(feature)),
UF_overall_loudness = quantile(get(feature), probs = .75) + 1.5*IQR(get(feature)),
max_overall_loudness = max(get(feature), na.rm = TRUE)) |>
rowwise()|>
mutate(out.of.range=allentown.data$get(feature)>max_overall_loudness || allentown.data$get(feature) <min_overall_loudness) |> #sees if less than min or greater than max
mutate(unusual= allentown.data$get(feature)>UF_overall_loudness || allentown.data$get(feature) <LF_overall_loudness) |> #sees if less than LF or more than UF
mutate(description = case_when( out.of.range == TRUE ~ "Out of Range", unusual == TRUE ~ "Outlying", TRUE ~ "Within Range")) #writes the desired description for each scenario
result <- data |>
left_join(stats, by = "artist") |>
mutate(
out_of_range = ifelse(artist == "Allentown" & get(feature) < min_val | get(feature) > max_val, TRUE, out_of_range),
unusual = ifelse(artist == "Allentown" & get(feature) < LF | get(feature) > UF, TRUE, unusual),
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over columns and analyze each numeric feature
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)] #gets columns which are numeric
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
combined_result
#creating a function to loop over all features
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) |>
summarize(min_overall_loudness = min(get(feature), na.rm = TRUE),
LF_overall_loudness = quantile(get(feature), probs = .25) - 1.5*IQR(get(feature)),
UF_overall_loudness = quantile(get(feature), probs = .75) + 1.5*IQR(get(feature)),
max_overall_loudness = max(get(feature), na.rm = TRUE)) |>
rowwise()|>
mutate(out.of.range=allentown.data$get(feature)>max_overall_loudness || allentown.data$get(feature) <min_overall_loudness) |> #sees if less than min or greater than max
mutate(unusual= allentown.data$get(feature)>UF_overall_loudness || allentown.data$get(feature) <LF_overall_loudness) |> #sees if less than LF or more than UF
mutate(description = case_when( out.of.range == TRUE ~ "Out of Range", unusual == TRUE ~ "Outlying", TRUE ~ "Within Range")) #writes the desired description for each scenario
result <- data |>
left_join(stats, by = "artist") |>
mutate(
out_of_range = ifelse(artist == "Allentown" & get(feature) < min_val | get(feature) > max_val, TRUE, out_of_range),
unusual = ifelse(artist == "Allentown" & get(feature) < LF | get(feature) > UF, TRUE, unusual),
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over columns and analyze each numeric feature
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)] #gets columns which are numeric
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
result <- analyze_all_features(data)
result <- check_all_features(data)
result <- check_all_features(data)
print(result)
result <- check_all_features(data) |>
print(result)
# Function to loop over all numeric features
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)] # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
library(tidyverse)
data= read.csv("data/essentia.data.csv") #gathers data for all 180 songs other than Allentown
allentown.data=read.csv("data/essentia.data.allentown.csv") #gathers data for the song Allentown
# Function to check a single feature
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) %>%
summarize(
min_feature = min(data[[feature]], na.rm = TRUE),
LF_feature = quantile(data[[feature]], probs = .25) - 1.5 * IQR(data[[feature]]),
UF_feature = quantile(data[[feature]], probs = .75) + 1.5 * IQR(data[[feature]]),
max_feature = max(data[[feature]], na.rm = TRUE)
)
result <- data %>%
left_join(stats, by = "artist") %>%
mutate(
out_of_range = data[[feature]] > max_feature | data[[feature]] < min_feature,
unusual = data[[feature]] > UF_feature | data[[feature]] < LF_feature,
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over all numeric features
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)] # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
# Run the function on your data
result <- check_all_features(data)
# Function to check a single feature
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) %>%
summarize(
min_feature = min(data[[feature]], na.rm = TRUE),
LF_feature = quantile(data[[feature]], probs = .25) - 1.5 * IQR(data[[feature]], na.rm = TRUE),
UF_feature = quantile(data[[feature]], probs = .75) + 1.5 * IQR(data[[feature]], na.rm = TRUE),
max_feature = max(data[[feature]], na.rm = TRUE)
)
result <- data %>%
left_join(stats, by = "artist") %>%
mutate(
out_of_range = data[[feature]] > max_feature | data[[feature]] < min_feature,
unusual = data[[feature]] > UF_feature | data[[feature]] < LF_feature,
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over all numeric features
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)] # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
# Run the function on your data
result <- check_all_features(data)
# Function to check a single feature
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) %>%
summarize(
min_feature = min(data[[feature]], na.rm = TRUE),
LF_feature = quantile(get(feature), probs = .25) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF_feature = quantile(data[[feature]], probs = .75) + 1.5 * IQR(data[[feature]], na.rm = TRUE),
max_feature = max(data[[feature]], na.rm = TRUE)
)
result <- data %>%
left_join(stats, by = "artist") %>%
mutate(
out_of_range = data[[feature]] > max_feature | data[[feature]] < min_feature,
unusual = data[[feature]] > UF_feature | data[[feature]] < LF_feature,
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over all numeric features
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)] # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
# Run the function on your data
result <- check_all_features(data)
numeric_columns <- names(data)[sapply(data, is.numeric)] # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
check_feature(data, feature)
stats <- data %>%
group_by(artist) %>%
summarize(
min_feature = min(data[[feature]], na.rm = TRUE),
LF_feature = quantile(get(feature), probs = .25) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF_feature = quantile(data[[feature]], probs = .75) + 1.5 * IQR(data[[feature]], na.rm = TRUE),
max_feature = max(data[[feature]], na.rm = TRUE)
)
feature="overall_loudness"
# Function to check a single feature
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) %>%
summarize(
min_feature = min(data[[feature]], na.rm = TRUE),
LF_feature = quantile(get(feature), probs = .25) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF_feature = quantile(data[[feature]], probs = .75) + 1.5 * IQR(data[[feature]], na.rm = TRUE),
max_feature = max(data[[feature]], na.rm = TRUE)
)
result <- data %>%
left_join(stats, by = "artist") %>%
mutate(
out_of_range = data[[feature]] > max_feature | data[[feature]] < min_feature,
unusual = data[[feature]] > UF_feature | data[[feature]] < LF_feature,
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over all numeric features
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)] # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
# Run the function on your data
result <- check_all_features(data)
library(tidyverse)
data = read.csv("data/essentia.data.csv")  # Gathers data for all 180 songs other than Allentown
allentown.data = read.csv("data/essentia.data.allentown.csv")  # Gathers data for the song Allentown
# Function to check a single feature
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) %>%
summarize(
min_feature = min(get(feature), na.rm = TRUE),
LF_feature = quantile(get(feature), probs = .25) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF_feature = quantile(get(feature), probs = .75) + 1.5 * IQR(get(feature), na.rm = TRUE),
max_feature = max(get(feature), na.rm = TRUE)
)
result <- data %>%
left_join(stats, by = "artist") %>%
mutate(
out_of_range = get(feature) > max_feature | get(feature) < min_feature,
unusual = get(feature) > UF_feature | get(feature) < LF_feature,
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over all numeric features
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)]  # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
# Run the function on your data
result <- check_all_features(data)
# Function to check a single feature
check_feature <- function(data, feature) {
stats <- data %>%
group_by(artist) %>%
summarize(
min_feature = min(get(feature), na.rm = TRUE),
LF_feature = quantile(get(feature), probs = .25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF_feature = quantile(get(feature), probs = .75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max_feature = max(get(feature), na.rm = TRUE)
)
result <- data %>%
left_join(stats, by = "artist") %>%
mutate(
out_of_range = get(feature) > max_feature | get(feature) < min_feature,
unusual = get(feature) > UF_feature | get(feature) < LF_feature,
description = case_when(
out_of_range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
return(result)
}
# Function to loop over all numeric features
check_all_features <- function(data) {
numeric_columns <- names(data)[sapply(data, is.numeric)]  # Identify numeric columns
# Loop through each numeric column and apply the analysis function
result_list <- lapply(numeric_columns, function(feature) {
check_feature(data, feature)
})
# Combine the results into a single dataframe
combined_result <- bind_rows(result_list)
return(combined_result)
}
# Run the function on your data
result <- check_all_features(data)
View(result)
